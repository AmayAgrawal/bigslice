#!/usr/bin/env python
# vim: set fileencoding=utf-8 :
#
# Copyright (C) 2019 Satria A. Kautsar
# Wageningen University & Research
# Bioinformatics Group
"""the main script of bigsscuit"""

import argparse
from os import path, makedirs
import glob
import multiprocessing
from modules.data.database import Database
from modules.data.bgc import BGC
from modules.data.hmm import HMMDatabase


def parse_input_gbk(arguments: tuple):
    file_path, output_db = arguments
    return [bgc.id for bgc
            in BGC.parse_gbk(file_path, output_db, True)]


def main():

    # TODO: check requirements

    # program parameters
    parser = argparse.ArgumentParser(description="tbd")
    parser.add_argument("input_folder", type=str)
    parser.add_argument("output_folder", type=str)
    parser.add_argument("-t", "--num_threads",
                        default=multiprocessing.cpu_count(), type=int)
    parser.add_argument("--hmm_db_folder",
                        default=path.join(path.dirname(
                            path.realpath(__file__)), "db"), type=str)
    args = parser.parse_args()

    # define variables
    pool = multiprocessing.Pool(processes=args.num_threads)
    input_folder = args.input_folder
    output_folder = args.output_folder
    data_db_path = path.join(output_folder, "data.db")
    hmm_db_folder = args.hmm_db_folder

    # create output folder if not exists
    if not path.exists(output_folder):
        makedirs(output_folder)

    # load/create SQLite3 database
    output_db = Database(data_db_path)

    # load HMM databases
    print("Loading HMM databases...")
    hmm_db = HMMDatabase.load_folder(hmm_db_folder, output_db, True)

    # load and parse input gbks
    file_paths = glob.glob(path.join(input_folder, "*.gbk"))
    arguments = [(file_path, output_db) for file_path in file_paths]
    all_bgc_ids = set()
    print("Parsing {} genbank files...".format(len(file_paths)))
    for i, result in enumerate(pool.map(parse_input_gbk, arguments)):
        if len(result) < 1:
            print("Can't parse any BGC from " + file_paths[i])
        all_bgc_ids.update(result)
    print("Found {} BGCs.".format(len(all_bgc_ids)))


if __name__ == "__main__":
    main()
